const smallCapsMap = {
  a: '·¥Ä', b: ' ô', c: '·¥Ñ', d: '·¥Ö', e: '·¥á', f: 'Íú∞',
  g: '…¢', h: ' ú', i: '…™', j: '·¥ä', k: '·¥ã', l: ' ü',
  m: '·¥ç', n: '…¥', o: '·¥è', p: '·¥ò', q: '«´', r: ' Ä',
  s: 'Íú±', t: '·¥õ', u: '·¥ú', v: '·¥†', w: '·¥°', x: 'x',
  y: ' è', z: '·¥¢',
  0: '‚Å∞', 1: '¬π', 2: '¬≤', 3: '¬≥', 4: '‚Å¥', 5: '‚Åµ',
  6: '‚Å∂', 7: '‚Å∑', 8: '‚Å∏', 9: '‚Åπ'
};

const symbols = [
  '‡ºí','‚ò¨','‚òÜ','‚òÖ','‚ùÄ','‚Ñ¢','‚Üí','‚úø','¬ß','€ù','‚ùñ','‚ÅÇ','¬©','‚Ä±','‚òû','‚òü','‚òú',
  '‚ô¨','‚ô´','‚ô™','·É¶','‚Ä†','‚Ä°','‚Äø','‚ï≠','‚ïØ','‚ïÆ','‚ï∞','‚Ç∞','„ÉÖ','„Éé','„Éü','„É≥','ÔΩ†','ÔΩü',
  '„ÄÜ','„ÄÖ','„Äô','„Äò','„Äè','„Äé','‡πì','‡πí','·ÉØ','·ö∏','·õÉ','·üö','‚ô°',
  '¬§','¬¢','¬•','¬£','¬∂','¬Æ','‚Ä¢','¬∞','¬±','√ó','√∑',
  '‚Üê','‚Üë','‚Üì','‚Üî','‚Üï','‚Ü®','‚Üª','‚Ü∫','‚áí','‚áî','‚áë','‚áì',
  '‚ô†','‚ô£','‚ô•','‚ô¶','‚ô≠','‚ôØ',
  '‚òÄ','‚òÅ','‚òÇ','‚òÉ','‚òÑ','‚òâ','‚òº','‚òΩ','‚òæ','‚òø','‚ôÄ','‚ôÇ',
  '‚öì','‚öñ','‚öô','‚öõ','‚ö°','‚ö†',
  '‚ü°','‚ü†','‚ü¢','‚ü£','‚ü§','‚üÅ','‚ü¶','‚üß','‚ü®','‚ü©','‚ü™','‚ü´',
  '‚óä','‚óâ','‚óã','‚óè','‚óå','‚óé','‚óá','‚óÜ','‚óà','‚óç','‚óê','‚óë','‚óí','‚óì','‚óî','‚óï','‚óñ','‚óó',
  '‚óû','‚óü','‚ó†','‚ó°','‚ó¢','‚ó£','‚ó§','‚ó•','‚ó¶',
  '‚¨±','‚¨∞','‚¨∏','‚¨π','‚¨∫','‚¨ª',
  '‚åñ','‚åò','‚åó','‚åô','‚å†','‚å°','‚å´','‚å¨','‚å≠','‚åÆ','‚åØ','‚å∞'];

let currentSymbol = '';
let baseName = '';
let isGenerated = false;
let symbolIndex = 0;
let clickCount = 0;
let recentSymbols = [];

function toSmallCaps(input) {
  return input.toLowerCase().split('').map(c =>
    c === ' ' ? '„Ö§' : smallCapsMap[c] || ''
  ).join('');
}

function handleAction() {
  if (!isGenerated) {
    generateName();
  } else {
    changeSymbolWithAnimation();
  }
}

function generateName() {
  const input = document.getElementById('nameInput').value.trim();
  if (input.length === 0 || input.length > 7) {
    alert('Please enter a name with 1‚Äì7 characters.');
    return;
  }
  baseName = `·¥≥·¥ø·¥Æ„É°${toSmallCaps(input)}`;
  currentSymbol = getRandomSymbol();
  updateResult();
  isGenerated = true;
  document.getElementById('actionBtn').innerText = '‚ôªÔ∏è';
  
  // Reset loop tracking when generating new name
  symbolIndex = 0;
  clickCount = 0;
  recentSymbols = [];
}

function changeSymbolWithAnimation() {
  const symbolSpan = document.querySelector('#result .symbol');
  if (!symbolSpan) return;
  
  symbolSpan.classList.add('fade-out');
  const newSymbolSpan = symbolSpan.cloneNode(true);
  symbolSpan.parentNode.replaceChild(newSymbolSpan, symbolSpan);
  
  newSymbolSpan.addEventListener('animationend', () => {
    newSymbolSpan.classList.remove('fade-out');
    
    clickCount++;
    
    // After 10 clicks, show a random symbol from recent 10
    if (clickCount > 10 && clickCount % 10 === 1 && recentSymbols.length >= 10) {
      currentSymbol = recentSymbols[Math.floor(Math.random() * recentSymbols.length)];
    } else {
      // Normal loop behavior
      currentSymbol = symbols[symbolIndex];
      symbolIndex = (symbolIndex + 1) % symbols.length;
      
      // Keep track of recent symbols (max 10)
      if (recentSymbols.length >= 10) {
        recentSymbols.shift();
      }
      recentSymbols.push(currentSymbol);
    }
    
    newSymbolSpan.textContent = currentSymbol;
    newSymbolSpan.classList.add('fade-in');
    newSymbolSpan.addEventListener('animationend', () => {
      newSymbolSpan.classList.remove('fade-in');
    }, { once: true });
  }, { once: true });
}

function updateResult() {
  const resultEl = document.getElementById('result');
  resultEl.style.opacity = 1;
  resultEl.innerHTML = '';
  const baseSpan = document.createElement('span');
  baseSpan.className = 'base-name';
  baseSpan.textContent = baseName;
  const symbolSpan = document.createElement('span');
  symbolSpan.className = 'symbol';
  symbolSpan.textContent = currentSymbol;
  resultEl.appendChild(baseSpan);
  resultEl.appendChild(symbolSpan);
}

function getRandomSymbol() {
  return symbols[Math.floor(Math.random() * symbols.length)];
}

function resetGenerator() {
  isGenerated = false;
  currentSymbol = '';
  baseName = '';
  symbolIndex = 0;
  clickCount = 0;
  recentSymbols = [];
  document.getElementById('result').style.opacity = 0;
  document.getElementById('result').innerHTML = '';
  document.getElementById('actionBtn').innerText = '‚ú®';
}

document.getElementById('nameInput').addEventListener('input', () => {
  const input = document.getElementById('nameInput');
  const charCount = document.getElementById('charCount');
  charCount.textContent = `${input.value.length}/7`;
  if (isGenerated) {
    resetGenerator();
  }
});

document.getElementById('result').addEventListener('click', () => {
  if (isGenerated) {
    const textToCopy = baseName + currentSymbol;
    navigator.clipboard.writeText(textToCopy).then(() => {
      showCopiedMessage();
    });
  }
});

function copyInvisible() {
  const invisible = '„Ö§';
  navigator.clipboard.writeText(invisible).then(() => {
    showCopiedMessage();
  });
}

function showCopiedMessage() {
  const msg = document.getElementById('copiedMessage');
  msg.style.display = 'block';
  setTimeout(() => {
    msg.style.display = 'none';
  }, 1500);
}

function toggleTheme() {
  const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
  if (isDark) {
    document.documentElement.removeAttribute('data-theme');
    document.querySelector('.theme-icon').textContent = 'üåû';
  } else {
    document.documentElement.setAttribute('data-theme', 'dark');
    document.querySelector('.theme-icon').textContent = 'üåô';
  }
}

(function applySystemTheme() {
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  if (prefersDark) {
    document.documentElement.setAttribute('data-theme', 'dark');
    document.querySelector('.theme-icon').textContent = 'üåô';
  } else {
    document.documentElement.removeAttribute('data-theme');
    document.querySelector('.theme-icon').textContent = 'üåû';
  }
})();

window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
  if (e.matches) {
    document.documentElement.setAttribute('data-theme', 'dark');
    document.querySelector('.theme-icon').textContent = 'üåô';
  } else {
    document.documentElement.removeAttribute('data-theme');
    document.querySelector('.theme-icon').textContent = 'üåû';
  }
});

const inputField = document.getElementById('nameInput');
const charCount = document.getElementById('charCount');

inputField.addEventListener('beforeinput', (e) => {
  const value = inputField.value;
  if (value.length >= 7 && e.inputType !== 'deleteContentBackward') {
    charCount.classList.add('limit-warning');
    if (navigator.vibrate) navigator.vibrate(100);
    setTimeout(() => {
      charCount.classList.remove('limit-warning');
    }, 300);
  }
});

// Enhanced Popup Functionality
async function showLocalizedPopup() {
  const popupDismissed = localStorage.getItem('popupDismissed');
  const now = new Date().getTime();
  
  if (popupDismissed && now - parseInt(popupDismissed) < 24 * 60 * 60 * 1000) {
    return;
  }

  document.getElementById('welcomePopup').style.display = 'flex';
  document.getElementById('loadingText').textContent = 'Checking your region...';

  let isBangladesh = false;
  try {
    const response = await fetch('https://ipinfo.io/json?token=8035bb17c7c15a');
    const data = await response.json();
    isBangladesh = (data.country === 'BD');
  } catch (error) {
    isBangladesh = Intl.DateTimeFormat().resolvedOptions().timeZone.includes('Dhaka') || 
                   navigator.language.includes('bn');
  }

  showPopupContent(isBangladesh);
}

function showPopupContent(isBangladesh) {
  const messages = {
    title: isBangladesh ? 'üì¢ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∏ üö®' : 'üì¢ Rename notice üö®',
    content: isBangladesh ? 
      '‡¶ü‡ßÅ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶Æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã,<br>‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶≤‡¶ø‡¶°‡¶æ‡¶∞/‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞‡¶ï‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø‡ßü‡ßá<br>‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡ßá‡¶á ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶ï‡¶∞‡ßã‡•§' : 
      'Set the name using the tool,<br>then show it to the leader/officer<br>and confirm before finalizing.',
    disableText: isBangladesh ? '‡ß®‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡¶® ‡¶®‡¶æ' : 'Hide for 24 hours'
  };

  document.getElementById('popupMessage').innerHTML = `
    <h3 style="margin-bottom: 1rem; color: #ff4d4d; font-size: 1.4rem; text-shadow: 0 0 10px rgba(255, 0, 0, 0.5), 0 0 20px rgba(255, 77, 77, 0.3);">
      ${messages.title}
    </h3>
    <p style="line-height: 1.6; margin-bottom: 1.5rem; font-size: 1.1rem; color: white; text-shadow: 0 0 8px rgba(0, 0, 0, 0.8);">
      ${messages.content}
    </p>
  `;
  
  document.getElementById('disableText').textContent = messages.disableText;
  document.querySelector('.popup-footer').style.display = 'flex';
}

document.getElementById('closePopup').addEventListener('click', function(e) {
  const popup = document.getElementById('welcomePopup');
  const rect = popup.getBoundingClientRect();
  const mouseX = e.clientX - rect.left;
  const mouseY = e.clientY - rect.top;
  
  popup.style.setProperty('--mouse-x', mouseX + 'px');
  popup.style.setProperty('--mouse-y', mouseY + 'px');
  
  popup.style.animation = 'holeVanish 0.5s forwards';
  
  setTimeout(() => {
    popup.style.display = 'none';
    
    if (document.getElementById('dontShowAgain').checked) {
      localStorage.setItem('popupDismissed', new Date().getTime());
    }
  }, 500);
});

document.addEventListener('DOMContentLoaded', showLocalizedPopup);
